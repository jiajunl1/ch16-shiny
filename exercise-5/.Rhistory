### Exercise 3 ###
library(shiny)
library(ggplot2)
# Create a shiny server that creates a scatterplot.
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# Store x and y values to plot
x <- mpg[[input$x_var]]
y <- mpg[[input$y_var]]
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ", input$x_var, " v.s.", input$y_var)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size = input$size,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
})
setwd("C:/info201/ch16-shiny/exercise-3")
setwd("C:/info201/ch16-shiny/exercise-3")
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
runApp()
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color",
label = "color",
choices = list("Red" = "red", "Yellow" = "yellow", "Blue" = "blue")
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
runApp()
runApp()
runApp()
runApp('C:/info201/ch16-shiny/exercise-5')
runApp('C:/info201/ch16-shiny/exercise-5')
# ui.R
library(shiny)
library(plotly)
shinyUI(navbarPage(
"Electoral College",
# Create a tab panel for your map
tabPanel(
"Map",
titlePanel("Electoral College Votes"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
"mapvar",
label = "Variable to Map",
choices = list(
"Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("map")
)
)
),
# Create a tabPanel to show your scatter plot
tabPanel(
"Scatter",
# Add a titlePanel to your tab
titlePanel("Population v.s. Vote Power"),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
textInput("search", label = "Find a State", value = "")
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput("scatter")
)
)
)
))
setwd("C:/info201/ch16-shiny/exercise-5")
setwd("C:/info201/ch16-shiny/exercise-5")
# server.R
library(dplyr)
# Read in data
source('./scripts/build_map.R')
source('./scripts/build_scatter.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state_codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined_data <- left_join(df, state_codes, by="state")
# Compute the electoral votes per 100K people in each state
joined_data <- joined_data %>% mutate(ratio = votes/population * 100000)
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
})
})
runApp()
runApp()
install.packages('rsconnect')
