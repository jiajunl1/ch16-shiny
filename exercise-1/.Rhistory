# Exercise 1: Building a user interface
install.packages("shiny")
setwd("C:/info201/ch16-shiny/exercise-1")
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Exercise 1: Building a user interface
install.packages("shiny")
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage(
# A top level header: "First Shiny Website"
h1("First Shiny Website"),
# A Paragraph, describing your excitement: include some `strong` text
p(
"This is my", strong("first"), "shiny project, and I feel..."
),
# An image with this `src`
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
img(
"",
src = "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"
),
# Another paragraph about a slider: include some `em` text
p("I can't wait to get", em("sliders"), "like these to work."),
# A slider with an appropriate label, min of 10, max of 100, value of 50
sliderInput(
"slider",
"My First Slider", min = 0, max = 100, value = 50, step = 10
)
)
# Define a `server` function that accepts an input and an output
# At this point, don't do anything in the function
# This function should perform the following:
server <- function(input, output) {
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp()
ui <- fluidPage(
# A top level header: "First Shiny Website"
h1("First Shiny Website"),
# A Paragraph, describing your excitement: include some `strong` text
p(
"This is my", strong("first"), "shiny project, and I feel..."
),
# An image with this `src`
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
img(
"",
src = "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"
),
# Another paragraph about a slider: include some `em` text
p("I can't wait to get", em("sliders"), "like these to work."),
# A slider with an appropriate label, min of 10, max of 100, value of 50
sliderInput(
"slider",
"My First Slider", min = 0, max = 100, value = 50, step = 10
)
)
# Define a `server` function that accepts an input and an output
# At this point, don't do anything in the function
# This function should perform the following:
server <- function(input, output) {
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
install.packages("httpuv")
install.packages("shiny")
rsconnect::setAccountInfo(name='jiajunl1',
token='2D882631B1F1FE895ADC7BB539CD18B8',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jiajunl1',
token='2D882631B1F1FE895ADC7BB539CD18B8',
secret='7X0gpLG2G7dFuARB3vQJjyXeYlJH20mBZniODkvh')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('exercise-2')
# Exercise 1: Shiny basics
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
strong("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
x <- input$price * input$quantity
message <- paste0("Hello there, the price is $", x )
message
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color",
label = "color",
choices = list("Red" = "red", "Yellow" = "yellow", "Blue" = "blue")
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
### Exercise 3 ###
library(shiny)
library(ggplot2)
# Create a shiny server that creates a scatterplot.
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# Store x and y values to plot
x <- mpg[[input$x_var]]
y <- mpg[[input$y_var]]
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ", input$x_var, " v.s.", input$y_var)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size = input$size,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
})
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color",
label = "color",
choices = list("Red" = "red", "Yellow" = "yellow", "Blue" = "blue")
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
runApp('C:/info201/ch16-shiny/exercise-3')
# Libraries
library(plotly)
library(shiny)
# ui.R
shinyUI(fluidPage(
mainPanel(
# Add a selectInput (with a proper id) that allows you to select a variable to map
selectInput("mapvar",
label = "Variable to Map",
choices = list("Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio")),
# Plot the map
plotlyOutput("map")
)
))
runApp('C:/info201/ch16-shiny/exercise-4')
# server.R
library(dplyr)
library(shiny)
library(plotly)
# Read in data
source('./scripts/build_map.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state_codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined_data <- left_join(df, state_codes, by="state")
# Compute the electoral votes per 100K people in each state
joined_data <- joined_data %>% mutate(ratio = votes/population * 100000)
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(build_map(joined_data, "population"))
})
})
# Libraries
library(plotly)
library(shiny)
# ui.R
shinyUI(fluidPage(
mainPanel(
# Add a selectInput (with a proper id) that allows you to select a variable to map
selectInput("mapvar",
label = "Variable to Map",
choices = list("Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio")),
# Plot the map
plotlyOutput("map")
)
))
runApp('C:/info201/ch16-shiny/exercise-4')
